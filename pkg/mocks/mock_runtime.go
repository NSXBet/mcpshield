// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mocks/mock_runtime.go -package=mocks -build_flags=-tags=test
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pkg "github.com/nsxbet/mcpshield/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockRuntime is a mock of Runtime interface.
type MockRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeMockRecorder
	isgomock struct{}
}

// MockRuntimeMockRecorder is the mock recorder for MockRuntime.
type MockRuntimeMockRecorder struct {
	mock *MockRuntime
}

// NewMockRuntime creates a new mock instance.
func NewMockRuntime(ctrl *gomock.Controller) *MockRuntime {
	mock := &MockRuntime{ctrl: ctrl}
	mock.recorder = &MockRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntime) EXPECT() *MockRuntimeMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockRuntime) Exec(ctx context.Context, input []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockRuntimeMockRecorder) Exec(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRuntime)(nil).Exec), ctx, input)
}

// IsReady mocks base method.
func (m *MockRuntime) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockRuntimeMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockRuntime)(nil).IsReady))
}

// Start mocks base method.
func (m *MockRuntime) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRuntimeMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRuntime)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockRuntime) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRuntimeMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRuntime)(nil).Stop), ctx)
}

// MockRuntimeFactory is a mock of RuntimeFactory interface.
type MockRuntimeFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeFactoryMockRecorder
	isgomock struct{}
}

// MockRuntimeFactoryMockRecorder is the mock recorder for MockRuntimeFactory.
type MockRuntimeFactoryMockRecorder struct {
	mock *MockRuntimeFactory
}

// NewMockRuntimeFactory creates a new mock instance.
func NewMockRuntimeFactory(ctrl *gomock.Controller) *MockRuntimeFactory {
	mock := &MockRuntimeFactory{ctrl: ctrl}
	mock.recorder = &MockRuntimeFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeFactory) EXPECT() *MockRuntimeFactoryMockRecorder {
	return m.recorder
}

// CreateRuntime mocks base method.
func (m *MockRuntimeFactory) CreateRuntime(image, command string, args []string, env map[string]string) pkg.Runtime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuntime", image, command, args, env)
	ret0, _ := ret[0].(pkg.Runtime)
	return ret0
}

// CreateRuntime indicates an expected call of CreateRuntime.
func (mr *MockRuntimeFactoryMockRecorder) CreateRuntime(image, command, args, env any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuntime", reflect.TypeOf((*MockRuntimeFactory)(nil).CreateRuntime), image, command, args, env)
}
